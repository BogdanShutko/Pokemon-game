{"ast":null,"code":"var _jsxFileName = \"C:\\\\ZarMarathon\\\\pokemon-game\\\\src\\\\routes\\\\Game\\\\routes\\\\board\\\\BoardPage.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PokemonContext } from \"../../../../components/context/pokemonContext\";\nimport PokemonCard from \"../../../../components/PokemonCard/PokemonCard\";\nimport PlayerBoard from \"./component/PlayerBoard\";\nimport s from \"./style.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst counterWin = (board, player1, player2) => {\n  let player1Count = player1.length;\n  let player2Count = player2.length;\n  board.forEach(item => {\n    if (item.card.possession === \"red\") {\n      player2Count++;\n    } else if (item.card.possession === \"blue\") {\n      player1Count++;\n    }\n  });\n  return [player1Count, player2Count];\n};\n\nconst BoardPage = () => {\n  _s();\n\n  const {\n    pokemons,\n    pokemons2,\n    changePokemons2\n  } = useContext(PokemonContext);\n  const history = useHistory();\n\n  if (Object.keys(pokemons).length === 0) {\n    history.replace(\"/game\");\n  }\n\n  const [board, setBoard] = useState([]);\n  const [player1, setPlayer1] = useState(() => {\n    return Object.values(pokemons).map(item => ({ ...item,\n      possession: \"blue\"\n    }));\n  });\n  const [player2, setPlayer2] = useState([]);\n  const [choiceCard, setChoiceCard] = useState(null);\n  const [steps, setSteps] = useState(0);\n  useEffect(async () => {\n    const boardResponse = await fetch(\"https://reactmarathon-api.netlify.app/api/board\");\n    const boardRequest = await boardResponse.json();\n    const playerTwoResponse = await fetch(\"https://reactmarathon-api.netlify.app/api/create-player\");\n    const playerTwoRequest = await playerTwoResponse.json();\n    setPlayer2(() => {\n      return playerTwoRequest.data.map(item => ({ ...item,\n        possession: \"red\"\n      }));\n    });\n    await changePokemons2(playerTwoRequest);\n    setBoard(boardRequest.data);\n  }, []);\n\n  const handlerClickBoardPlate = async position => {\n    console.log(\"#####: position:\", position);\n    console.log(\"#####: card\", choiceCard);\n    setSteps(prevState => {\n      const count = prevState + 1;\n      return count;\n    });\n\n    if (choiceCard) {\n      const params = {\n        position,\n        card: choiceCard,\n        board\n      };\n      const res = await fetch(\"https://reactmarathon-api.netlify.app/api/players-turn\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(params)\n      });\n      const request = await res.json();\n      setBoard(request.data);\n    }\n\n    if (choiceCard.player === 1) {\n      setPlayer1(prevState => prevState.filter(item => item.id !== choiceCard.id));\n    }\n\n    if (choiceCard.player === 2) {\n      setPlayer2(prevState => prevState.filter(item => item.id !== choiceCard.id));\n    }\n  };\n\n  useEffect(() => {\n    if (steps === 9) {\n      const [count1, count2] = counterWin(board, player1, player2);\n\n      if (count1 > count2) {\n        alert(\"WIN\");\n      } else if (count2 > count1) {\n        alert(\"LOSE\");\n      } else alert(\"DRAW\");\n    }\n  }, [steps]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.playerOne,\n      children: /*#__PURE__*/_jsxDEV(PlayerBoard, {\n        player: 1,\n        onClickCard: card => setChoiceCard(card),\n        cards: player1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.board,\n      children: board.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.boardPlate,\n          onClick: () => !item.card && handlerClickBoardPlate(item.position),\n          children: [\"(\", item.card && /*#__PURE__*/_jsxDEV(PokemonCard, { ...item.card,\n            isActive: true,\n            minimize: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 30\n          }, this), \")\"]\n        }, item.position, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.playerTwo,\n      children: /*#__PURE__*/_jsxDEV(PlayerBoard, {\n        player: 2,\n        cards: player2,\n        onClickCard: card => setChoiceCard(card)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BoardPage, \"w47NbRP1Ybub/eKnkU1TQAfthN0=\", false, function () {\n  return [useHistory];\n});\n\n_c = BoardPage;\nexport default BoardPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardPage\");","map":{"version":3,"sources":["C:/ZarMarathon/pokemon-game/src/routes/Game/routes/board/BoardPage.js"],"names":["useContext","useEffect","useState","useHistory","PokemonContext","PokemonCard","PlayerBoard","s","counterWin","board","player1","player2","player1Count","length","player2Count","forEach","item","card","possession","BoardPage","pokemons","pokemons2","changePokemons2","history","Object","keys","replace","setBoard","setPlayer1","values","map","setPlayer2","choiceCard","setChoiceCard","steps","setSteps","boardResponse","fetch","boardRequest","json","playerTwoResponse","playerTwoRequest","data","handlerClickBoardPlate","position","console","log","prevState","count","params","res","method","headers","body","JSON","stringify","request","player","filter","id","count1","count2","alert","root","playerOne","boardPlate","playerTwo"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { PokemonContext } from \"../../../../components/context/pokemonContext\";\r\nimport PokemonCard from \"../../../../components/PokemonCard/PokemonCard\";\r\nimport PlayerBoard from \"./component/PlayerBoard\";\r\nimport s from \"./style.module.css\";\r\n\r\nconst counterWin = (board, player1, player2) => {\r\n  let player1Count = player1.length;\r\n  let player2Count = player2.length;\r\n  board.forEach((item) => {\r\n    if (item.card.possession === \"red\") {\r\n      player2Count++;\r\n    } else if (item.card.possession === \"blue\") {\r\n      player1Count++;\r\n    }\r\n  });\r\n  return [player1Count, player2Count];\r\n};\r\n\r\nconst BoardPage = () => {\r\n  const { pokemons, pokemons2, changePokemons2 } = useContext(PokemonContext);\r\n\r\n  const history = useHistory();\r\n  if (Object.keys(pokemons).length === 0) {\r\n    history.replace(\"/game\");\r\n  }\r\n\r\n  const [board, setBoard] = useState([]);\r\n  const [player1, setPlayer1] = useState(() => {\r\n    return Object.values(pokemons).map((item) => ({\r\n      ...item,\r\n      possession: \"blue\",\r\n    }));\r\n  });\r\n  const [player2, setPlayer2] = useState([]);\r\n  const [choiceCard, setChoiceCard] = useState(null);\r\n  const [steps, setSteps] = useState(0);\r\n\r\n  useEffect(async () => {\r\n    const boardResponse = await fetch(\r\n      \"https://reactmarathon-api.netlify.app/api/board\"\r\n    );\r\n    const boardRequest = await boardResponse.json();\r\n\r\n    const playerTwoResponse = await fetch(\r\n      \"https://reactmarathon-api.netlify.app/api/create-player\"\r\n    );\r\n\r\n    const playerTwoRequest = await playerTwoResponse.json();\r\n\r\n    setPlayer2(() => {\r\n      return playerTwoRequest.data.map((item) => ({\r\n        ...item,\r\n        possession: \"red\",\r\n      }));\r\n    });\r\n\r\n    await changePokemons2(playerTwoRequest);\r\n    setBoard(boardRequest.data);\r\n  }, []);\r\n\r\n  const handlerClickBoardPlate = async (position) => {\r\n    console.log(\"#####: position:\", position);\r\n    console.log(\"#####: card\", choiceCard);\r\n    setSteps((prevState) => {\r\n      const count = prevState + 1;\r\n      return count;\r\n    });\r\n\r\n    if (choiceCard) {\r\n      const params = {\r\n        position,\r\n        card: choiceCard,\r\n        board,\r\n      };\r\n\r\n      const res = await fetch(\r\n        \"https://reactmarathon-api.netlify.app/api/players-turn\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(params),\r\n        }\r\n      );\r\n\r\n      const request = await res.json();\r\n      setBoard(request.data);\r\n    }\r\n\r\n    if (choiceCard.player === 1) {\r\n      setPlayer1((prevState) =>\r\n        prevState.filter((item) => item.id !== choiceCard.id)\r\n      );\r\n    }\r\n\r\n    if (choiceCard.player === 2) {\r\n      setPlayer2((prevState) =>\r\n        prevState.filter((item) => item.id !== choiceCard.id)\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (steps === 9) {\r\n      const [count1, count2] = counterWin(board, player1, player2);\r\n      if (count1 > count2) {\r\n        alert(\"WIN\");\r\n      } else if (count2 > count1) {\r\n        alert(\"LOSE\");\r\n      } else alert(\"DRAW\");\r\n    }\r\n  }, [steps]);\r\n\r\n  return (\r\n    <div className={s.root}>\r\n      <div className={s.playerOne}>\r\n        {\r\n          <PlayerBoard\r\n            player={1}\r\n            onClickCard={(card) => setChoiceCard(card)}\r\n            cards={player1}\r\n          ></PlayerBoard>\r\n        }\r\n      </div>\r\n      <div className={s.board}>\r\n        {board.map((item) => {\r\n          return (\r\n            <div\r\n              key={item.position}\r\n              className={s.boardPlate}\r\n              onClick={() =>\r\n                !item.card && handlerClickBoardPlate(item.position)\r\n              }\r\n            >\r\n              ({item.card && <PokemonCard {...item.card} isActive minimize />})\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className={s.playerTwo}>\r\n        {\r\n          <PlayerBoard\r\n            player={2}\r\n            cards={player2}\r\n            onClickCard={(card) => setChoiceCard(card)}\r\n          ></PlayerBoard>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardPage;\r\n"]},"metadata":{},"sourceType":"module"}