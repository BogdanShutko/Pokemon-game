{"ast":null,"code":"var _jsxFileName = \"C:\\\\ZarMarathon\\\\pokemon-game\\\\src\\\\routes\\\\Game\\\\routes\\\\board\\\\BoardPage.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { FinalContext } from \"../../../../components/context/finalContext\";\nimport { PokemonContext2 } from \"../../../../components/context/pokemon2Context\";\nimport { PokemonContext } from \"../../../../components/context/pokemonContext\";\nimport PokemonCard from \"../../../../components/PokemonCard/PokemonCard\";\nimport PlayerBoard from \"./component/PlayerBoard\";\nimport s from \"./style.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardPage = () => {\n  _s();\n\n  const {\n    pokemons\n  } = useContext(PokemonContext);\n  const history = useHistory(); // if (Object.keys(pokemons).length === 0) {\n  //   history.replace(\"/game\");\n  // }\n\n  const [board, setBoard] = useState([]);\n  const [player1, setPlayer1] = useState(() => {\n    return Object.values(pokemons).map(item => ({ ...item,\n      possession: \"blue\"\n    }));\n  });\n  console.log(player1);\n  const [player2, setPlayer2] = useState([]);\n  const [choiceCard, setChoiceCard] = useState(null);\n  useEffect(async () => {\n    const boardResponse = await fetch(\"https://reactmarathon-api.netlify.app/api/board\");\n    const boardRequest = await boardResponse.json();\n    setBoard(boardRequest.data);\n    player1final = [...player1];\n    console.log(player1final);\n    const playerTwoResponse = await fetch(\"https://reactmarathon-api.netlify.app/api/create-player\");\n    const playerTwoRequest = await playerTwoResponse.json();\n    setPlayer2(() => {\n      return playerTwoRequest.data.map(item => ({ ...item,\n        possession: \"red\"\n      }));\n    });\n  }, []);\n\n  const handlerClickBoardPlate = async position => {\n    console.log(\"#####: position:\", position);\n    console.log(\"#####: card\", choiceCard);\n\n    if (choiceCard) {\n      const params = {\n        position,\n        card: choiceCard,\n        board\n      };\n      const res = await fetch(\"https://reactmarathon-api.netlify.app/api/players-turn\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(params)\n      });\n      const request = await res.json();\n      setBoard(request.data);\n    }\n\n    if (choiceCard.player === 1) {\n      setPlayer1(prevState => prevState.filter(item => item.id !== choiceCard.id));\n    }\n\n    if (choiceCard.player === 2) {\n      setPlayer2(prevState => prevState.filter(item => item.id !== choiceCard.id));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.playerOne,\n      children: /*#__PURE__*/_jsxDEV(PlayerBoard, {\n        player: 1,\n        onClickCard: card => setChoiceCard(card),\n        cards: player1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.board,\n      children: board.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.boardPlate,\n          onClick: () => !item.card && handlerClickBoardPlate(item.position),\n          children: [\"(\", item.card && /*#__PURE__*/_jsxDEV(PokemonCard, { ...item.card,\n            isActive: true,\n            minimize: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 30\n          }, this), \")\"]\n        }, item.position, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.playerTwo,\n      children: /*#__PURE__*/_jsxDEV(PlayerBoard, {\n        player: 2,\n        cards: player2,\n        onClickCard: card => setChoiceCard(card)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BoardPage, \"U3uhzBe5v6q2c6+aFUlAVDTTe5s=\", false, function () {\n  return [useHistory];\n});\n\n_c = BoardPage;\nexport default BoardPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardPage\");","map":{"version":3,"sources":["C:/ZarMarathon/pokemon-game/src/routes/Game/routes/board/BoardPage.js"],"names":["useContext","useEffect","useState","useHistory","FinalContext","PokemonContext2","PokemonContext","PokemonCard","PlayerBoard","s","BoardPage","pokemons","history","board","setBoard","player1","setPlayer1","Object","values","map","item","possession","console","log","player2","setPlayer2","choiceCard","setChoiceCard","boardResponse","fetch","boardRequest","json","data","player1final","playerTwoResponse","playerTwoRequest","handlerClickBoardPlate","position","params","card","res","method","headers","body","JSON","stringify","request","player","prevState","filter","id","root","playerOne","boardPlate","playerTwo"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FinalContext } from \"../../../../components/context/finalContext\";\r\nimport { PokemonContext2 } from \"../../../../components/context/pokemon2Context\";\r\nimport { PokemonContext } from \"../../../../components/context/pokemonContext\";\r\nimport PokemonCard from \"../../../../components/PokemonCard/PokemonCard\";\r\nimport PlayerBoard from \"./component/PlayerBoard\";\r\nimport s from \"./style.module.css\";\r\n\r\nconst BoardPage = () => {\r\n  const { pokemons } = useContext(PokemonContext);\r\n\r\n  const history = useHistory();\r\n  // if (Object.keys(pokemons).length === 0) {\r\n  //   history.replace(\"/game\");\r\n  // }\r\n\r\n  const [board, setBoard] = useState([]);\r\n  const [player1, setPlayer1] = useState(() => {\r\n    return Object.values(pokemons).map((item) => ({\r\n      ...item,\r\n      possession: \"blue\",\r\n    }));\r\n  });\r\n  console.log(player1);\r\n  const [player2, setPlayer2] = useState([]);\r\n  const [choiceCard, setChoiceCard] = useState(null);\r\n  useEffect(async () => {\r\n    const boardResponse = await fetch(\r\n      \"https://reactmarathon-api.netlify.app/api/board\"\r\n    );\r\n    const boardRequest = await boardResponse.json();\r\n    setBoard(boardRequest.data);\r\n    player1final = [...player1];\r\n    console.log(player1final);\r\n    const playerTwoResponse = await fetch(\r\n      \"https://reactmarathon-api.netlify.app/api/create-player\"\r\n    );\r\n\r\n    const playerTwoRequest = await playerTwoResponse.json();\r\n    setPlayer2(() => {\r\n      return playerTwoRequest.data.map((item) => ({\r\n        ...item,\r\n        possession: \"red\",\r\n      }));\r\n    });\r\n  }, []);\r\n\r\n  const handlerClickBoardPlate = async (position) => {\r\n    console.log(\"#####: position:\", position);\r\n    console.log(\"#####: card\", choiceCard);\r\n    if (choiceCard) {\r\n      const params = {\r\n        position,\r\n        card: choiceCard,\r\n        board,\r\n      };\r\n\r\n      const res = await fetch(\r\n        \"https://reactmarathon-api.netlify.app/api/players-turn\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(params),\r\n        }\r\n      );\r\n\r\n      const request = await res.json();\r\n      setBoard(request.data);\r\n    }\r\n\r\n    if (choiceCard.player === 1) {\r\n      setPlayer1((prevState) =>\r\n        prevState.filter((item) => item.id !== choiceCard.id)\r\n      );\r\n    }\r\n\r\n    if (choiceCard.player === 2) {\r\n      setPlayer2((prevState) =>\r\n        prevState.filter((item) => item.id !== choiceCard.id)\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={s.root}>\r\n      <div className={s.playerOne}>\r\n        {\r\n          <PlayerBoard\r\n            player={1}\r\n            onClickCard={(card) => setChoiceCard(card)}\r\n            cards={player1}\r\n          ></PlayerBoard>\r\n        }\r\n      </div>\r\n      <div className={s.board}>\r\n        {board.map((item) => {\r\n          return (\r\n            <div\r\n              key={item.position}\r\n              className={s.boardPlate}\r\n              onClick={() =>\r\n                !item.card && handlerClickBoardPlate(item.position)\r\n              }\r\n            >\r\n              ({item.card && <PokemonCard {...item.card} isActive minimize />})\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className={s.playerTwo}>\r\n        {\r\n          <PlayerBoard\r\n            player={2}\r\n            cards={player2}\r\n            onClickCard={(card) => setChoiceCard(card)}\r\n          ></PlayerBoard>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardPage;\r\n"]},"metadata":{},"sourceType":"module"}