{"ast":null,"code":"var _jsxFileName = \"C:\\\\ZarMarathon\\\\pokemon-game\\\\src\\\\routes\\\\Game\\\\routes\\\\board\\\\BoardPage.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport PokemonCard from \"../../../../components/PokemonCard/PokemonCard\";\nimport { addSecondPokemonsAsync, changeWinner, firstPlayerPokemons, secondPlayerPokemons, winner } from \"../../../../store/pokemons\";\nimport PlayerBoard from \"./component/PlayerBoard\";\nimport s from \"./style.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardPage = () => {\n  _s();\n\n  const firstPlayer = useSelector(firstPlayerPokemons);\n  const secondPlayer = useSelector(secondPlayerPokemons);\n  const history = useHistory();\n\n  if (Object.keys(firstPlayer).length !== 5) {\n    history.replace(\"/game\");\n  }\n\n  const [board, setBoard] = useState([]);\n  const [player1, setPlayer1] = useState(() => {\n    return Object.values(firstPlayer).map(item => ({ ...item,\n      possession: \"blue\"\n    }));\n  });\n  const [player2, setPlayer2] = useState([]);\n  const [choiceCard, setChoiceCard] = useState(null);\n  const [steps, setSteps] = useState(0);\n  const dispatch = useDispatch();\n  useEffect(async () => {\n    const boardResponse = await fetch(\"https://reactmarathon-api.netlify.app/api/board\");\n    const boardRequest = await boardResponse.json();\n    const playerTwoResponse = await fetch(\"https://reactmarathon-api.netlify.app/api/create-player\");\n    const playerTwoRequest = await playerTwoResponse.json();\n    dispatch(addSecondPokemonsAsync(playerTwoRequest.data));\n    setPlayer2(() => {\n      return playerTwoRequest.data.map(item => ({ ...item,\n        possession: \"red\"\n      }));\n    }); // await changePokemons2(playerTwoRequest);\n\n    setBoard(boardRequest.data);\n  }, []);\n\n  const handlerClickBoardPlate = async position => {\n    if (choiceCard) {\n      const params = {\n        position,\n        card: choiceCard,\n        board\n      };\n      const res = await fetch(\"https://reactmarathon-api.netlify.app/api/players-turn\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(params)\n      });\n      const request = await res.json();\n      setBoard(request.data);\n    }\n\n    if (choiceCard.player === 1) {\n      setPlayer1(prevState => prevState.filter(item => item.id !== choiceCard.id));\n    }\n\n    if (choiceCard.player === 2) {\n      setPlayer2(prevState => prevState.filter(item => item.id !== choiceCard.id));\n    }\n\n    setSteps(prevState => {\n      const count = prevState + 1;\n      return count;\n    });\n  };\n\n  const counterWin = (board, player1, player2) => {\n    let player1Count = player1.length;\n    let player2Count = player2.length;\n    board.forEach((item, index) => {\n      if (item.card.possession === \"blue\") {\n        player1Count++;\n      } else if (item.card.possession === \"red\") player2Count++;\n    });\n    return [player1Count, player2Count];\n  };\n\n  const winnerPlayer = useSelector(winner);\n  useEffect(() => {\n    if (steps === 9) {\n      const [count1, count2] = counterWin(board, player1, player2);\n\n      if (count1 > count2) {\n        dispatch(changeWinner(1));\n        console.log(winnerPlayer);\n        alert(\"WIN\");\n        history.replace(\"/game/finish\");\n      } else if (count2 > count1) {\n        dispatch(changeWinner(2));\n        console.log(winnerPlayer);\n        alert(\"LOSE\");\n        history.replace(\"/game/finish\");\n      } else {\n        console.log(winnerPlayer);\n        alert(\"DRAW\");\n        history.replace(\"/game/finish\");\n      }\n    }\n  }, [steps]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.playerOne,\n      children: /*#__PURE__*/_jsxDEV(PlayerBoard, {\n        player: 1,\n        onClickCard: card => setChoiceCard(card),\n        cards: player1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.board,\n      children: board.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.boardPlate,\n          onClick: () => !item.card && handlerClickBoardPlate(item.position),\n          children: [\"(\", item.card && /*#__PURE__*/_jsxDEV(PokemonCard, { ...item.card,\n            isActive: true,\n            minimize: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 30\n          }, this), \")\"]\n        }, item.position, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.playerTwo,\n      children: /*#__PURE__*/_jsxDEV(PlayerBoard, {\n        player: 2,\n        cards: player2,\n        onClickCard: card => setChoiceCard(card)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BoardPage, \"K3w+7txHd4sYu/pysLBYbqo6WD4=\", false, function () {\n  return [useSelector, useSelector, useHistory, useDispatch, useSelector];\n});\n\n_c = BoardPage;\nexport default BoardPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardPage\");","map":{"version":3,"sources":["C:/ZarMarathon/pokemon-game/src/routes/Game/routes/board/BoardPage.js"],"names":["useContext","useEffect","useState","useDispatch","useSelector","useHistory","PokemonCard","addSecondPokemonsAsync","changeWinner","firstPlayerPokemons","secondPlayerPokemons","winner","PlayerBoard","s","BoardPage","firstPlayer","secondPlayer","history","Object","keys","length","replace","board","setBoard","player1","setPlayer1","values","map","item","possession","player2","setPlayer2","choiceCard","setChoiceCard","steps","setSteps","dispatch","boardResponse","fetch","boardRequest","json","playerTwoResponse","playerTwoRequest","data","handlerClickBoardPlate","position","params","card","res","method","headers","body","JSON","stringify","request","player","prevState","filter","id","count","counterWin","player1Count","player2Count","forEach","index","winnerPlayer","count1","count2","console","log","alert","root","playerOne","boardPlate","playerTwo"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport PokemonCard from \"../../../../components/PokemonCard/PokemonCard\";\r\nimport {\r\n  addSecondPokemonsAsync,\r\n  changeWinner,\r\n  firstPlayerPokemons,\r\n  secondPlayerPokemons,\r\n  winner,\r\n} from \"../../../../store/pokemons\";\r\nimport PlayerBoard from \"./component/PlayerBoard\";\r\nimport s from \"./style.module.css\";\r\n\r\nconst BoardPage = () => {\r\n  const firstPlayer = useSelector(firstPlayerPokemons);\r\n  const secondPlayer = useSelector(secondPlayerPokemons);\r\n  const history = useHistory();\r\n\r\n  if (Object.keys(firstPlayer).length !== 5) {\r\n    history.replace(\"/game\");\r\n  }\r\n\r\n  const [board, setBoard] = useState([]);\r\n  const [player1, setPlayer1] = useState(() => {\r\n    return Object.values(firstPlayer).map((item) => ({\r\n      ...item,\r\n      possession: \"blue\",\r\n    }));\r\n  });\r\n  const [player2, setPlayer2] = useState([]);\r\n  const [choiceCard, setChoiceCard] = useState(null);\r\n  const [steps, setSteps] = useState(0);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(async () => {\r\n    const boardResponse = await fetch(\r\n      \"https://reactmarathon-api.netlify.app/api/board\"\r\n    );\r\n    const boardRequest = await boardResponse.json();\r\n\r\n    const playerTwoResponse = await fetch(\r\n      \"https://reactmarathon-api.netlify.app/api/create-player\"\r\n    );\r\n\r\n    const playerTwoRequest = await playerTwoResponse.json();\r\n    dispatch(addSecondPokemonsAsync(playerTwoRequest.data));\r\n\r\n    setPlayer2(() => {\r\n      return playerTwoRequest.data.map((item) => ({\r\n        ...item,\r\n        possession: \"red\",\r\n      }));\r\n    });\r\n\r\n    // await changePokemons2(playerTwoRequest);\r\n    setBoard(boardRequest.data);\r\n  }, []);\r\n\r\n  const handlerClickBoardPlate = async (position) => {\r\n    if (choiceCard) {\r\n      const params = {\r\n        position,\r\n        card: choiceCard,\r\n        board,\r\n      };\r\n\r\n      const res = await fetch(\r\n        \"https://reactmarathon-api.netlify.app/api/players-turn\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(params),\r\n        }\r\n      );\r\n\r\n      const request = await res.json();\r\n      setBoard(request.data);\r\n    }\r\n\r\n    if (choiceCard.player === 1) {\r\n      setPlayer1((prevState) =>\r\n        prevState.filter((item) => item.id !== choiceCard.id)\r\n      );\r\n    }\r\n\r\n    if (choiceCard.player === 2) {\r\n      setPlayer2((prevState) =>\r\n        prevState.filter((item) => item.id !== choiceCard.id)\r\n      );\r\n    }\r\n    setSteps((prevState) => {\r\n      const count = prevState + 1;\r\n      return count;\r\n    });\r\n  };\r\n\r\n  const counterWin = (board, player1, player2) => {\r\n    let player1Count = player1.length;\r\n    let player2Count = player2.length;\r\n    board.forEach((item, index) => {\r\n      if (item.card.possession === \"blue\") {\r\n        player1Count++;\r\n      } else if (item.card.possession === \"red\") player2Count++;\r\n    });\r\n    return [player1Count, player2Count];\r\n  };\r\n  const winnerPlayer = useSelector(winner);\r\n  useEffect(() => {\r\n    if (steps === 9) {\r\n      const [count1, count2] = counterWin(board, player1, player2);\r\n      if (count1 > count2) {\r\n        dispatch(changeWinner(1));\r\n        console.log(winnerPlayer);\r\n        alert(\"WIN\");\r\n        history.replace(\"/game/finish\");\r\n      } else if (count2 > count1) {\r\n        dispatch(changeWinner(2));\r\n        console.log(winnerPlayer);\r\n        alert(\"LOSE\");\r\n        history.replace(\"/game/finish\");\r\n      } else {\r\n        console.log(winnerPlayer);\r\n        alert(\"DRAW\");\r\n        history.replace(\"/game/finish\");\r\n      }\r\n    }\r\n  }, [steps]);\r\n\r\n  return (\r\n    <div className={s.root}>\r\n      <div className={s.playerOne}>\r\n        {\r\n          <PlayerBoard\r\n            player={1}\r\n            onClickCard={(card) => setChoiceCard(card)}\r\n            cards={player1}\r\n          ></PlayerBoard>\r\n        }\r\n      </div>\r\n      <div className={s.board}>\r\n        {board.map((item) => {\r\n          return (\r\n            <div\r\n              key={item.position}\r\n              className={s.boardPlate}\r\n              onClick={() =>\r\n                !item.card && handlerClickBoardPlate(item.position)\r\n              }\r\n            >\r\n              ({item.card && <PokemonCard {...item.card} isActive minimize />})\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className={s.playerTwo}>\r\n        {\r\n          <PlayerBoard\r\n            player={2}\r\n            cards={player2}\r\n            onClickCard={(card) => setChoiceCard(card)}\r\n          ></PlayerBoard>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardPage;\r\n"]},"metadata":{},"sourceType":"module"}