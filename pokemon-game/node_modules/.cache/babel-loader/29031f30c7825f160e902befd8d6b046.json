{"ast":null,"code":"var _jsxFileName = \"C:\\\\ZarMarathon\\\\pokemon-game\\\\src\\\\routes\\\\Game\\\\routes\\\\board\\\\BoardPage.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PokemonContext } from \"../../../../components/context/pokemonContext\";\nimport PokemonCard from \"../../../../components/PokemonCard/PokemonCard\";\nimport PlayerBoard from \"./component/PlayerBoard\";\nimport s from \"./style.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardPage = () => {\n  _s();\n\n  const {\n    pokemons\n  } = useContext(PokemonContext);\n  const history = useHistory(); // if (Object.keys(pokemons).length === 0) {\n  //   history.replace(\"/game\");\n  // }\n\n  const [board, setBoard] = useState([]);\n  const [player1, setPlayer1] = useState([]);\n  const [player2, setPlayer2] = useState([]);\n  const [choiceCard, setChoiceCard] = useState(null);\n  useEffect(async () => {\n    const boardResponse = await fetch(\"https://reactmarathon-api.netlify.app/api/board\");\n    const boardRequest = await boardResponse.json();\n    setBoard(boardRequest.data);\n    const playerTwoResponse = await fetch(\"https://reactmarathon-api.netlify.app/api/create-player\");\n\n    setPlayer1 = () => {\n      return Object.values(pokemons).map(item => ({ ...item,\n        possession: \"green\"\n      }));\n    };\n\n    const playerTwoRequest = await playerTwoResponse.json();\n    setPlayer2(() => {\n      return playerTwoRequest.data.map(item => ({ ...item,\n        possession: \"red\"\n      }));\n    });\n  }, []);\n\n  const handlerClickBoardPlate = async position => {\n    console.log(\"#####: position:\", position);\n    console.log(\"#####: card\", choiceCard);\n\n    if (choiceCard) {\n      const params = {\n        position,\n        card: choiceCard,\n        board\n      };\n      const res = await fetch(\"https://reactmarathon-api.netlify.app/api/players-turn\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(params)\n      });\n      const request = await res.json();\n      setBoard(request.data);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.playerOne,\n      children: /*#__PURE__*/_jsxDEV(PlayerBoard, {\n        player: 1,\n        onClickCard: card => setChoiceCard(card),\n        cards: Object.values(pokemons)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.board,\n      children: board.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.boardPlate,\n          onClick: () => !item.card && handlerClickBoardPlate(item.position),\n          children: [\"(\", item.card && /*#__PURE__*/_jsxDEV(PokemonCard, { ...item.card,\n            isActive: true,\n            minimize: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 30\n          }, this), \")\"]\n        }, item.position, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.playerTwo,\n      children: /*#__PURE__*/_jsxDEV(PlayerBoard, {\n        player: 2,\n        cards: player2,\n        onClickCard: card => setChoiceCard(card)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BoardPage, \"Hi5SjnrynZDSIjKJeKVYUumFjG8=\", false, function () {\n  return [useHistory];\n});\n\n_c = BoardPage;\nexport default BoardPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardPage\");","map":{"version":3,"sources":["C:/ZarMarathon/pokemon-game/src/routes/Game/routes/board/BoardPage.js"],"names":["useContext","useEffect","useState","useHistory","PokemonContext","PokemonCard","PlayerBoard","s","BoardPage","pokemons","history","board","setBoard","player1","setPlayer1","player2","setPlayer2","choiceCard","setChoiceCard","boardResponse","fetch","boardRequest","json","data","playerTwoResponse","Object","values","map","item","possession","playerTwoRequest","handlerClickBoardPlate","position","console","log","params","card","res","method","headers","body","JSON","stringify","request","root","playerOne","boardPlate","playerTwo"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { PokemonContext } from \"../../../../components/context/pokemonContext\";\r\nimport PokemonCard from \"../../../../components/PokemonCard/PokemonCard\";\r\nimport PlayerBoard from \"./component/PlayerBoard\";\r\nimport s from \"./style.module.css\";\r\n\r\nconst BoardPage = () => {\r\n  const { pokemons } = useContext(PokemonContext);\r\n  const history = useHistory();\r\n  // if (Object.keys(pokemons).length === 0) {\r\n  //   history.replace(\"/game\");\r\n  // }\r\n\r\n  const [board, setBoard] = useState([]);\r\n  const [player1, setPlayer1] = useState([]);\r\n  const [player2, setPlayer2] = useState([]);\r\n  const [choiceCard, setChoiceCard] = useState(null);\r\n  useEffect(async () => {\r\n    const boardResponse = await fetch(\r\n      \"https://reactmarathon-api.netlify.app/api/board\"\r\n    );\r\n    const boardRequest = await boardResponse.json();\r\n    setBoard(boardRequest.data);\r\n\r\n    const playerTwoResponse = await fetch(\r\n      \"https://reactmarathon-api.netlify.app/api/create-player\"\r\n    );\r\n\r\n    setPlayer1 = () => {\r\n      return Object.values(pokemons).map((item) => ({\r\n        ...item,\r\n        possession: \"green\",\r\n      }));\r\n    };\r\n\r\n    const playerTwoRequest = await playerTwoResponse.json();\r\n    setPlayer2(() => {\r\n      return playerTwoRequest.data.map((item) => ({\r\n        ...item,\r\n        possession: \"red\",\r\n      }));\r\n    });\r\n  }, []);\r\n\r\n  const handlerClickBoardPlate = async (position) => {\r\n    console.log(\"#####: position:\", position);\r\n    console.log(\"#####: card\", choiceCard);\r\n    if (choiceCard) {\r\n      const params = {\r\n        position,\r\n        card: choiceCard,\r\n        board,\r\n      };\r\n\r\n      const res = await fetch(\r\n        \"https://reactmarathon-api.netlify.app/api/players-turn\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(params),\r\n        }\r\n      );\r\n\r\n      const request = await res.json();\r\n      setBoard(request.data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={s.root}>\r\n      <div className={s.playerOne}>\r\n        {\r\n          <PlayerBoard\r\n            player={1}\r\n            onClickCard={(card) => setChoiceCard(card)}\r\n            cards={Object.values(pokemons)}\r\n          ></PlayerBoard>\r\n        }\r\n      </div>\r\n      <div className={s.board}>\r\n        {board.map((item) => {\r\n          return (\r\n            <div\r\n              key={item.position}\r\n              className={s.boardPlate}\r\n              onClick={() =>\r\n                !item.card && handlerClickBoardPlate(item.position)\r\n              }\r\n            >\r\n              ({item.card && <PokemonCard {...item.card} isActive minimize />})\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className={s.playerTwo}>\r\n        {\r\n          <PlayerBoard\r\n            player={2}\r\n            cards={player2}\r\n            onClickCard={(card) => setChoiceCard(card)}\r\n          ></PlayerBoard>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardPage;\r\n"]},"metadata":{},"sourceType":"module"}